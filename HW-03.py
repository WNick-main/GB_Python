def ex1(num1, num2):
    """
    1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
    Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
    """
    try:
        result = num1 / num2
    except ZeroDivisionError:
        result = "Error"
    return result


num_a = 10
num_b = 5
print(f'Задание 1: {ex1(num_a, num_b)}')
num_a = 10
num_b = 0
print(f'Задание 1 c 0: {ex1(num_a, num_b)}')


# -ex2------------------------------------------------
def ex2(fname, lname, bday, city, mail, phone):
    """
    2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
    имя, фамилия, год рождения, город проживания, email, телефон.
    Функция должна принимать параметры как именованные аргументы.
    Реализовать вывод данных о пользователе одной строкой.
    """
    result = f'ФИО пользователя: {fname} {lname}, дата рождения: {bday} из города {city}. Email: {mail}, телефон: {phone}'
    return result


ex2_result = ex2(fname='Иван', lname='Иванов', bday='01jan1989', city='Moscow', mail='vano@mail.ru',
                 phone='88002553535')
print(f'Задание 2: {ex2_result}')


# -ex3------------------------------------------------
def my_func(*args):
    """
    3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.
    """
    return max(args) + max(x for x in args if x != max(args))


print(f'Задание 3: {my_func(-6, 12, -1)}')


# -ex4.1----------------------------------------------
def my_func(x, y):
    """
    4. Программа принимает действительное положительное число x и целое отрицательное число y.
    Необходимо выполнить возведение числа x в степень y.
    Задание необходимо реализовать в виде функции my_func(x, y).
    При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
    Первый способ — возведение в степень с помощью оператора **
    """
    if x < 0 or type(y) == 'int' or y > 0:
        return "Error"
    else:
        return x ** y


print(f'Задание 4.1: {my_func(2.2, -8)}')


# -ex4.2----------------------------------------------
def my_func(x, y):
    """
    4. Программа принимает действительное положительное число x и целое отрицательное число y.
    Необходимо выполнить возведение числа x в степень y.
    Задание необходимо реализовать в виде функции my_func(x, y).
    При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
    Второй способ — более сложная реализация без оператора **, предусматривающая использование цикла.
    """
    if x < 0 or type(y) == 'int' or y > 0:
        return "Error"
    else:
        multiplier = x
        result = 1
        for item in range(0, y, -1):
            result /= multiplier
        return result


print(f'Задание 4.2: {my_func(2.2, -8)}')


# -ex5------------------------------------------------
def ex5():
    """
    5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
    При нажатии Enter должна выводиться сумма чисел.
    Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
    Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
    Но если вместо числа вводится специальный символ, выполнение программы завершается.
    Если специальный символ введен после нескольких чисел,
    то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

    """
    print("Введите числа разделяя их пробелом. Для выхода введите 'E'")
    result = 0
    run_while = True
    while run_while:
        inp_str = input()
        item_list = inp_str.split()
        for item in item_list:
            if item == 'E':
                run_while = False
                break
            try:
                float(item)
            except ValueError:
                run_while = False
                break
            result += float(item)
        print(str(result))
    return result


# ex5()

# -ex6------------------------------------------------
def int_func(inp_str):
    """
    6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же,
    но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
    Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
    Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки,
    но каждое слово должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().

    """
    str_list = inp_str.split()
    if len(str_list) > 1:
        return ' '.join(list(map(int_func, str_list)))
    else:
        return str_list[0].capitalize()


Check_string = 'In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document'.lower()
print(f'Задание 6:')
print(Check_string)
print(int_func(Check_string))
